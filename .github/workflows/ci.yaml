name: CI-CD workflow for Java code

on:
  push:
    branches: [main]

permissions:
  id-token: write
  contents: read

jobs:
  CI:
    runs-on: ubuntu-latest

    steps:
      # Checkout code from the repository
      - name: 'Checkout code'
        uses: 'actions/checkout@v2'

      # Set up Java environment
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'  # Adjust version as needed

      # Cache Maven dependencies
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      # Install dependencies and run tests
      - name: Build with Maven
        run: |
          mvn clean install

      # Generate code coverage report
      - name: Generate code coverage report
        run: |
          mvn jacoco:report
          
      # Upload code coverage report as artifacts
      - name: Archive code coverage report
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          path: target/site/jacoco


      # - name: Set up JFrog CLI
      #   uses: jfrog/setup-jfrog-cli@v2
      #   with:
      #     version: 2.14.0  # Specify the version of JFrog CLI you want to use

      # - name: Configure JFrog CLI
      #   run: |
      #     jfrog config add artifactory --url "$JFROG_ARTIFACTORY_URL" --user "$JFROG_USER" --password "$JFROG_PASSWORD" --interactive=false
      #   env:
      #     JFROG_ARTIFACTORY_URL: ${{ secrets.JFROG_ARTIFACTORY_URL }}
      #     JFROG_USER: ${{ secrets.JFROG_USER }}
      #     JFROG_PASSWORD: ${{ secrets.JFROG_PASSWORD }}

      # - name: Upload Artifact to JFrog Artifactory
      #   run: |
      #     jfrog rt upload "target/*.jar" "${{ secrets.JFROG_REPO_NAME }}/$(date +%Y%m%d%H%M%S)/"
     
     # Build trust between GitHub and AWS using OIDC connector
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
           role-to-assume: ${{ secrets.AWS_IAM_ARN }}
           role-session-name: samplesession
           aws-region: ${{ secrets.AWS_REGION }}

     # Authenticate AWS with Docker to interact with an Amazon ECR registry
      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

         

    # Build the Docker image using Dockerfile & tag it with commit SHA, & push it to ECR repository
      - name: Build Docker Image
        run: |
         docker build -t flaskapp:${{ github.sha }} .
         docker tag flaskapp:${{ github.sha }} ${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:${{ github.sha }}
         

    # Run Trivy vulnerability scanner on specified Docker image in the ECR repository
      - name: Run Trivy vulnerability scanner
        id: trivy-scan
        uses: aquasecurity/trivy-action@master
        with:
         image-ref: '${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:${{ github.sha }}'
         format: 'table'
         exit-code: '1'
         ignore-unfixed: true
         vuln-type: 'os,library'
         severity: 'CRITICAL,HIGH'
        continue-on-error: true

        
  # Display boolean value(true/false) depending on the scan report that is received from previous step
      - name: Detected vulnerabilities
        if: steps.trivy-scan.outcome == 'failure'
        run: |
         echo "Vulnerability scan failed!"
         

  # Display boolean value(true/false) depending on the scan report that is received from previous step
      - name: No vulnerabilities detectedd
        if: steps.trivy-scan.outcome == 'success'
        run: |
         echo "Vulnerability scan succeeded!"

  # Push Docker image to Amazon ECR
      - name: push docker imagee
        run: |
           docker push ${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:${{ github.sha }}


 # Build trust between GitHub and AWS using OIDC connector
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
           role-to-assume: ${{ secrets.AWS_IAM_ARN }}
           role-session-name: samplesession
           aws-region: ${{ secrets.AWS_REGION }}

 # # Deploy to ECS
 #      - name: Deploy to ECS
 #        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
 #        with:
 #          task-definition: task-definition.json
 #          service: serive-wine
 #          cluster: DevCluster
 #          wait-for-service-stability: true
